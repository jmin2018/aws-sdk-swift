//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for ApiGatewayManagementApi
public enum ApiGatewayManagementApiErrorType: AWSErrorType {
    case forbiddenException(message: String?)
    case goneException(message: String?)
    case limitExceededException(message: String?)
    case payloadTooLargeException(message: String?)
}

extension ApiGatewayManagementApiErrorType {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.firstIndex(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "ForbiddenException":
            self = .forbiddenException(message: message)
        case "GoneException":
            self = .goneException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "PayloadTooLargeException":
            self = .payloadTooLargeException(message: message)
        default:
            return nil
        }
    }
}

extension ApiGatewayManagementApiErrorType : CustomStringConvertible {
    public var description : String {
        switch self {
        case .forbiddenException(let message):
            return "ForbiddenException: \(message ?? "")"
        case .goneException(let message):
            return "GoneException: \(message ?? "")"
        case .limitExceededException(let message):
            return "LimitExceededException: \(message ?? "")"
        case .payloadTooLargeException(let message):
            return "PayloadTooLargeException: \(message ?? "")"
        }
    }
}
